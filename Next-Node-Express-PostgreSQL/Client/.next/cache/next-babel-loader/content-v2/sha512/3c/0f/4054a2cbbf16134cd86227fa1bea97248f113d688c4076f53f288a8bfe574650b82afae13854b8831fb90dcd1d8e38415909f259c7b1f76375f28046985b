{"ast":null,"code":"import _regeneratorRuntime from \"D:/Project-www/www/Next-Node-Express-PostgreSQL/Client/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Project-www/www/Next-Node-Express-PostgreSQL/Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { generate, verify } from 'password-hash';\nexport function checkCreds(_x, _x2) {\n  return _checkCreds.apply(this, arguments);\n} //export async function register()\n\n/*\r\n1. get password of username\r\n2. create e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\n\nfunction _checkCreds() {\n  _checkCreds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(username, password) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"Hash of \".concat(password, \" is: \").concat(generate(password))); //const res = await fetch(`http://localhost:5000/login/${username}`);\n            //const match = verify(password,res)    \n            //return creds;\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _checkCreds.apply(this, arguments);\n}","map":{"version":3,"sources":["D:/Project-www/www/Next-Node-Express-PostgreSQL/Client/lib/auth.js"],"names":["generate","verify","checkCreds","username","password","console","log"],"mappings":";;AAAA,SAAQA,QAAR,EAAkBC,MAAlB,QAA+B,eAA/B;AAEA,gBAAsBC,UAAtB;AAAA;AAAA,C,CAOA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;yEArBO,iBAA0BC,QAA1B,EAAoCC,QAApC;AAAA;AAAA;AAAA;AAAA;AACHC,YAAAA,OAAO,CAACC,GAAR,mBAAuBF,QAAvB,kBAAuCJ,QAAQ,CAACI,QAAD,CAA/C,GADG,CAEH;AACA;AACA;;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import {generate, verify} from 'password-hash'\r\n\r\nexport async function checkCreds(username, password){\r\n    console.log(`Hash of ${password} is: ${generate(password)}`)\r\n    //const res = await fetch(`http://localhost:5000/login/${username}`);\r\n    //const match = verify(password,res)    \r\n    //return creds;\r\n}\r\n\r\n//export async function register()\r\n/*\r\n1. get password of username\r\n2. create e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/"]},"metadata":{},"sourceType":"module"}